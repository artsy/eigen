name: Release with Changelog

on:
  push:
    tags:
      - "ios-[0-9]*.[0-9]*.[0-9]*-[0-9]*.[0-9]*.[0-9]*.[0-9]*-submission"

permissions:
  contents: write

jobs:
  generate-release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup node.js
        uses: ./.github/actions/setup-node

      - name: Fetch submission tags
        run: |
          # Fetch only iOS and Android submission tags with more specific refspecs
          git fetch origin '+refs/tags/ios-*-submission:refs/tags/ios-*-submission' --depth=300 --jobs=8
          git fetch origin '+refs/tags/android-*-submission:refs/tags/android-*-submission' --depth=300 --jobs=8
          echo "fetched submission tags!"

      - name: Determine iOS and Android tags
        id: determine_tags
        run: |
          # Get all iOS release tags and sort them
          ios_tags=$(git tag --sort=-creatordate | grep "^ios.*submission$" | head -n 10)

          # Get the last and second-to-last iOS tags (first and second in the sorted list)
          last_ios_tag=$(echo "$ios_tags" | head -n1)
          second_last_ios_tag=$(echo "$ios_tags" | head -n2 | tail -n1)

          # Get all Android release tags and sort them
          android_tags=$(git tag --sort=-creatordate | grep "^android.*submission$" | head -n 10)

          # Get the last and second-to-last Android tags (first and second in the sorted list)
          last_android_tag=$(echo "$android_tags" | head -n1)


          # Ensure tags are found
          if [ -z "$last_ios_tag" ] || [ -z "$second_last_ios_tag" ]; then
            echo "Error: Could not determine all required iOS tags."
            exit 1
          fi

          if [ -z "$last_android_tag" ]; then
            echo "Error: Could not determine all required Android tags."
            exit 1
          fi

          # Export tags as step outputs
          echo "last_ios_tag=$last_ios_tag" >> $GITHUB_OUTPUT
          echo "second_last_ios_tag=$second_last_ios_tag" >> $GITHUB_OUTPUT
          echo "last_android_tag=$last_android_tag" >> $GITHUB_OUTPUT

          # Also export to environment for later steps
          echo "last_ios_tag=$last_ios_tag" >> $GITHUB_ENV
          echo "second_last_ios_tag=$second_last_ios_tag" >> $GITHUB_ENV
          echo "last_android_tag=$last_android_tag" >> $GITHUB_ENV

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract version from iOS tag for Sentry link (remove -submission suffix)
          ios_version=$(echo "${{ env.last_ios_tag }}" | sed -E 's/-submission$//')

          # Extract version from Android tag for Sentry link (remove -submission suffix)
          android_version=$(echo "${{ env.last_android_tag }}" | sed -E 's/-submission$//')

          # Add monitoring links with correct Sentry URL format
          ios_link="https://artsynet.sentry.io/explore/releases/${ios_version}/?environment=production&project=5867225"
          android_link="https://artsynet.sentry.io/explore/releases/${android_version}/?environment=production&project=5867225"

          sentry_header="Check the health of this release in Sentry:"
          sentry_footer=":apple: [iOS](${ios_link}) | :robot: [Android](${android_link})"


          # Extract the version from the iOS tag for the title
          version=$(echo "${{ env.last_ios_tag }}" | sed -E 's/^ios-([0-9]+\.[0-9]+\.[0-9]+)-.*/v\1/')

          gh release create "${{ env.last_ios_tag }}" \
              --notes-start-tag "${{ env.second_last_ios_tag }}" \
              --repo "${{ github.repository }}" \
              --title "$version" \
              --generate-notes \
              --notes "$(printf "%s\n\n%s" "$sentry_header" "$sentry_footer")"
