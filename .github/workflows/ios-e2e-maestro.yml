name: iOS E2E Tests (Maestro)

on:
  schedule:
    - cron: "0 6 * * *" # Runs daily at 6:00 AM UTC
  workflow_dispatch: # Allows you to trigger the workflow manually from the Actions tab

  push:
    branches:
      - gkartalis/PHIRE-1889-ios-e2e-gh-actions

jobs:
  e2e-tests:
    # if: github.ref == 'refs/heads/main'
    runs-on: macos-latest # iOS simulators require macOS runners
    timeout-minutes: 45
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        node_index: [0, 1, 2]
        total_nodes: [3]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1.6"
          bundler-cache: true

      - name: Install Ruby dependencies
        run: bundle install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up env for ci
        run: touch .env.shared && touch keys.shared.json && scripts/setup/setup-env-for-ci

      - name: Set up maestro env
        run: ./scripts/setup/setup-env-for-maestro ios

      - name: Download iOS App
        run: aws s3 cp s3://artsy-citadel/eigen/builds/ios/Artsy-latest.zip ./Artsy.zip

      - name: Unzip iOS App
        run: unzip Artsy.zip

      - name: Install Maestro
        run: curl -Ls "https://get.maestro.mobile.dev" | bash

      - name: Add Maestro to PATH
        run: echo "$HOME/.maestro/bin" >> $GITHUB_PATH

      - name: Install Facebook IDB
        run: |
          brew tap facebook/fb
          brew install idb-companion

      - name: Check Xcode and iOS Simulator availability
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app

          echo "üîç Xcode version:"
          xcodebuild -version
          echo ""
          echo "üì± Available iOS runtimes:"
          xcrun simctl list runtimes | grep iOS
          echo ""
          echo "üì± Available device types:"
          xcrun simctl list devicetypes | grep iPhone
          echo ""
          echo "üì± Currently existing simulators:"
          xcrun simctl list devices

      - name: Create and boot iPhone 16 Pro iOS 18.2 simulator
        run: |
          echo "üì± Creating iPhone 16 Pro simulator with iOS 18.2..."

          # Create the simulator
          SIMULATOR_UDID=$(xcrun simctl create "iPhone 16 Pro Test" com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro com.apple.CoreSimulator.SimRuntime.iOS-18-2)
          echo "Created simulator with UDID: $SIMULATOR_UDID"
          echo "SIMULATOR_UDID=$SIMULATOR_UDID" >> $GITHUB_ENV

          # Boot the simulator with arm64 architecture for Apple Silicon
          echo "üöÄ Booting simulator..."
          xcrun simctl boot "$SIMULATOR_UDID" --arch=arm64

          # Wait for the simulator to be ready
          echo "‚è≥ Waiting for simulator to be ready..."
          timeout 120s bash -c 'while [[ $(xcrun simctl list devices | grep "$0" | grep -c "Booted") -eq 0 ]]; do sleep 2; done' "$SIMULATOR_UDID"

          # Verify simulator is running
          echo "‚úÖ Simulator status:"
          xcrun simctl list devices | grep "$SIMULATOR_UDID"
