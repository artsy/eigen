#!/usr/bin/env bash
set -euxo pipefail

# Always reset and configure ccache for consistent behavior
if command -v ccache >/dev/null 2>&1; then
  # Find ccache full path
  CCACHE_PATH=$(which ccache)
  echo "Found ccache at: $CCACHE_PATH"
  
  # Set up ccache directory
  export CCACHE_DIR=~/.ccache
  mkdir -p "$CCACHE_DIR"
  
  # Configure ccache settings - use FULL PATHS for compiler commands
  export CCACHE_MAXSIZE=5G
  export CC="$CCACHE_PATH /usr/bin/clang"
  export CXX="$CCACHE_PATH /usr/bin/clang++"
  export CCACHE_CPP2=yes
  export CCACHE_SLOPPINESS=pch_defines,time_macros,include_file_mtime,file_macro
  
  # Log configuration for debugging
  echo "iOS build using ccache with:"
  echo "  CCACHE_DIR=$CCACHE_DIR"
  echo "  CC=$CC"
  echo "  CXX=$CXX"
  
  # Reset and log ccache stats before build
  ccache -z
  echo "Initial ccache stats:"
  ccache -s
  
  # We're NOT passing CC/CXX to xcodebuild directly - letting the React Native post_install handle it
  # Instead, we'll rely on React Native's :ccache_enabled parameter
  export XCODEBUILD_EXTRA=""
else
  echo "ccache not found or not available"
  export XCODEBUILD_EXTRA=""
fi

# Run the build with ccache enabled
# Create a wrapper for ccache to help Xcode find it
if command -v ccache >/dev/null 2>&1; then
  mkdir -p /tmp/ccache-wrappers
  
  # Create wrapper scripts that Xcode can use
  echo '#!/bin/bash' > /tmp/ccache-wrappers/clang
  echo "$(which ccache) /usr/bin/clang \"\$@\"" >> /tmp/ccache-wrappers/clang
  chmod +x /tmp/ccache-wrappers/clang
  
  echo '#!/bin/bash' > /tmp/ccache-wrappers/clang++
  echo "$(which ccache) /usr/bin/clang++ \"\$@\"" >> /tmp/ccache-wrappers/clang++
  chmod +x /tmp/ccache-wrappers/clang++
  
  # Add the wrappers to the PATH
  export PATH="/tmp/ccache-wrappers:$PATH"
fi

# Run the build with ccache enabled
CCACHE_WRAPPER_PATH=${CC:+CC="$CC"} ${CXX:+CXX="$CXX"} \
xcodebuild -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Debug -sdk iphonesimulator build \
  -destination platform="$DEVICE_HOST_PLAT",OS="$DEVICE_HOST_OS",name="$DEVICE_HOST_NAME" \
  -derivedDataPath "$DERIVED_DATA_PATH" \
  GCC_PREPROCESSOR_DEFINITIONS='$(inherited)' \
  | tee ./xcode_build_raw.log \
  | bundle exec xcpretty -c

# Log ccache stats after build
if command -v ccache >/dev/null 2>&1; then
  ccache -s
fi
