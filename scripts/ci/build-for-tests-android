#!/usr/bin/env bash
set -exo pipefail

# Always reset and configure ccache for consistent behavior
if command -v ccache >/dev/null 2>&1; then
  # Set up ccache directory
  export CCACHE_DIR=~/.ccache
  mkdir -p "$CCACHE_DIR"
  
  # Configure ccache settings
  export CCACHE_MAXSIZE=5G
  export NDK_CCACHE=/usr/bin/ccache
  export CCACHE_CPP2=yes
  export CCACHE_SLOPPINESS=pch_defines,time_macros,include_file_mtime
  
  # Update gradle.properties to use ccache
  # Note: We need to be careful with properties that might already exist
  if ! grep -q "android.ndkPath=" android/gradle.properties; then
    echo "" >> android/gradle.properties
    echo "# NDK ccache configuration - added dynamically" >> android/gradle.properties
    echo "android.ndkPath=${ANDROID_NDK_HOME:-/opt/android/sdk/ndk}" >> android/gradle.properties
  fi
  
  # Add the NDK command line flag instead of using a property
  export GRADLE_OPTS="$GRADLE_OPTS -Pandroid.native.buildOutput=verbose -Dorg.gradle.project.android.native.buildOutput=verbose"
  
  # Log configuration for debugging
  echo "Android build using ccache with:"
  echo "  CCACHE_DIR=$CCACHE_DIR"
  echo "  NDK_CCACHE=$NDK_CCACHE"
  
  # Reset and log ccache stats before build
  ccache -z
  echo "Initial ccache stats:"
  ccache -s
else
  echo "ccache not found or not available"
fi

pushd android
# Run the build with ccache enabled in the gradle.properties
yarn react-native build-android --mode=release --extra-params='--max-workers 2'
popd

# Log ccache stats after build
if command -v ccache >/dev/null 2>&1; then
  ccache -s
fi
