version: 2.1

orbs:
  node: circleci/node@5.3.0
  queue: eddiewebb/queue@2.2.1
  horizon: artsy/release@0.0.1
  macos: circleci/macos@2.5.2
  android: circleci/android@2.5.0

commands:
  await-previous-builds:
    parameters:
      branch:
        description: The branch to wait on
        type: string
    steps:
      - queue/until_front_of_line:
          time: "30" # how long a queue will wait until the job exits
          only-on-branch: <<parameters.branch>> # restrict queueing to a specific branch (default *)
  install-node:
    steps:
      - node/install:
          install-yarn: true
          node-version: "20.9.0"
  generate-checksums:
    steps:
      - run:
          name: "Generate initial checksum manifests"
          command: |
            mkdir .manifests
            scripts/ci/generate-manifest.js .manifests/node_modules '^yarn\.lock$' '^patches/' '^package\.json$'
            scripts/ci/generate-manifest.js .manifests/js_transform '^\.manifests/node_modules' '^babel\.config\.js' '^relay\.config\.js' '^jest\.config\.js'
            scripts/ci/generate-manifest.js .manifests/js_bundle '^\.manifests/js_transform' '^data/' '^index\.ios\.js' '^src/(?!.*(__mocks__|__fixtures__))'
            scripts/ci/generate-manifest.js .manifests/cocoapods '^ios/Podfile' '^Gemfile'
            scripts/ci/generate-manifest.js .manifests/native_code '^\.manifests/node_modules' '^ios/Podfile' '^Gemfile' '^dist/' '^ios/Artsy' '^patches/react-native' '^\.env\.example'
            scripts/ci/generate-manifest.js .manifests/android_native '^\.manifests/node_modules' '^android/' '^patches/react-native' '^\.env\.example'
  setup-env-file:
    steps:
      - run:
          name: "Set up .env file"
          command: touch .env.shared && touch .env && scripts/setup/setup-env-for-ci
  setup-awscli:
    steps:
      - run:
          name: "Set up aws cli not installed"
          command: scripts/setup/setup-awscli
  install-node-modules:
    steps:
      - node/install-packages:
          pkg-manager: yarn
          cache-version: v9
  run-relay-compiler:
    steps:
      - run:
          name: Run Relay compiler
          command: yarn relay
  update-echo:
    steps:
      - run:
          name: Update echo
          command: ./scripts/setup/update-echo
  update-staging-echo:
    steps:
      - run:
          name: Update staging echo
          command: ./scripts/setup/update-staging-echo
  generate-query-map:
    steps:
      - run:
          name: Compile query map
          command: yarn relay
  install-gems:
    steps:
      - restore_cache:
          keys:
            - v10-gems-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Bundle install
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          key: v10-gems-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - .vendor
  install-cocoapods:
    steps:
      - restore_cache:
          keys:
            - v22-pods-{{ checksum ".manifests/cocoapods" }}
      - run:
          name: Install Pods
          command: cd ios; bundle exec pod check --ignore-dev-pods || bundle exec pod install; cd ..;
      - save_cache:
          key: v22-pods-{{ checksum ".manifests/cocoapods" }}
          paths:
            - ios/Pods
            # this changes after pod install because we don't install dev tools on CI
            # so we save it to the cache to avoid comparison errors with Pods/Manifest.lock
            - ios/Podfile.lock
  build-app-ios:
    steps:
      - restore_cache:
          keys:
            - v19-app_build_ios-{{ checksum ".manifests/app_build" }}
      - run:
          name: Download fonts from s3
          command: ./scripts/setup/download-fonts
      - run:
          name: Download ios assets
          command: ./scripts/setup/download-assets-ios
      - run:
          name: Build App
          command: ./scripts/ci/ci-ios
      - save_cache:
          key: v19-app_build_ios-{{ checksum ".manifests/app_build" }}
          paths:
            - derived_data
            - node_modules/react-native-config
  prep-android-env:
    steps:
      - attach_workspace:
          at: ../workspace
      - restore_cache:
          keys:
            - v13-test-success-{{ checksum "../workspace/.manifests/android_native" }}
      - android/change-java-version:
          java-version: 17
      - run:
          name: Quit early if possible
          command: |
            if test $CIRCLE_BRANCH != beta-android && ls build-success.log
            then
              circleci step halt
            fi
      - run:
          name: Clear project dir
          command: |
            rm -rf /home/circleci/project/*
      - run:
          name: Install ninja
          command: sudo apt-get install ninja-build
      - checkout
      - install-node
      - setup-awscli
      - setup-env-file
      - install-node-modules
      - run-relay-compiler
      - update-echo
      - install-gems
  build-app-android:
    steps:
      - restore_cache:
          keys:
            - v7-app_build_android-{{ checksum "../workspace/.manifests/app_build" }}
      - generate-query-map
      - run:
          name: Download fonts from s3
          command: ./scripts/setup/download-fonts
      - run:
          name: Download android assets
          command: ./scripts/setup/download-assets-android
      - run:
          name: Build App
          command: ./scripts/ci/ci-android
      - save_cache:
          key: v7-app_build_android-{{ checksum "../workspace/.manifests/app_build" }}
          paths:
            - android/build
            - android/app/build
            - node_modules/react-native-config
jobs:
  detect-secrets:
    docker:
      - image: artsy/detect-secrets:ci # pragma: allowlist secret
    resource_class: small
    working_directory: /usr/src/app
    steps:
      - checkout
      - run: ./scripts/detect-secrets/secrets-check-all

  run-nightly-tasks:
    environment:
      BUNDLE_PATH: .vendor

    macos:
      xcode: 15.1
      resource_class: macos.m1.medium.gen1

    steps:
      - checkout
      - generate-checksums
      - setup-awscli
      - setup-env-file
      - install-gems
      - run:
          name: Download android assets
          command: ./scripts/setup/download-assets-android
      - run:
          name: Update rollout if needed
          command: ./scripts/deploys/update-android-rollout-if-needed

  deploy-nightly-beta:
    environment:
      BUNDLE_PATH: .vendor

    macos:
      xcode: 15.1
      resource_class: macos.m1.medium.gen1

    steps:
      - checkout
      - generate-checksums
      - setup-awscli
      - setup-env-file
      - install-gems
      - run:
          name: Create next version if needed
          command: ./scripts/deploys/create-next-version-if-needed
      - run:
          name: Deploy betas
          command: ./scripts/deploys/deploy-beta-both

  check-and-deploy:
    environment:
      BUNDLE_PATH: .vendor

    macos:
      xcode: 15.1
      resource_class: macos.m1.medium.gen1

    steps:
      - checkout
      - install-node
      - install-gems
      - setup-awscli
      - run:
          name: Determine Deployment Type
          command: |
            DEPLOYMENT_TYPE=$(./scripts/codepush/determine-deployment-type.sh)
            echo "export DEPLOYMENT_TYPE=$DEPLOYMENT_TYPE" >> $BASH_ENV
      - run:
          name: Handle Deployment for beta
          command: |
            if [ "$DEPLOYMENT_TYPE" == "beta" ]; then
              echo "Native code changed, new beta needed!"
              ./scripts/codepush/maybe_notify_beta_needed.sh
              circleci-agent step halt
            fi
      - install-node-modules
      - run:
          name: Install CodePush CLI
          command: yarn global add appcenter-cli
      - run-relay-compiler
      - run:
          name: Handle Deployment for codepush
          command: |
            echo "Triggering CodePush deployment..."
            ./scripts/codepush/deploy-to-codepush.sh Staging

  test-js:
    parallelism: 8
    executor:
      name: node/default
      tag: "20.9.0"
    resource_class: large
    steps:
      - checkout
      - install-node-modules
      - run-relay-compiler
      - run:
          command: yarn jest --ci --forceExit --logHeapUsage --runInBand --reporters=default --reporters=jest-junit --shard=$(expr $CIRCLE_NODE_INDEX + 1)/$CIRCLE_NODE_TOTAL
          name: Run Jest tests
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
            JEST_JUNIT_UNIQUE_OUTPUT_NAME: true
      - store_artifacts:
          path: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/

  update-metaphysics:
    executor:
      name: node/default
      tag: "20.9.0"
    resource_class: medium
    steps:
      - checkout
      - generate-checksums
      - install-node-modules
      - run-relay-compiler
      - generate-query-map
      - run:
          name: Update metaphysics
          command: yarn update-metaphysics

  check-code:
    executor:
      name: node/default
      tag: "20.9.0"
    resource_class: small
    steps:
      - checkout
      - install-node-modules
      - run-relay-compiler
      - run:
          command: yarn type-check
      - run:
          name: Check Branch and Exit Early if Ignored
          command: |
            if [[ "$CIRCLE_BRANCH" == "main" || "$CIRCLE_BRANCH" == "beta-ios" || "$CIRCLE_BRANCH" == "beta-android" ]]; then
              echo "On ignored branch ($CIRCLE_BRANCH). Exiting early."
              circleci-agent step halt
            fi
      - run:
          name: Danger
          command: yarn danger ci --verbose

  check-flags:
    environment:
      BUNDLE_PATH: .vendor # path to install gems and use for caching

    macos:
      xcode: 15.1
      resource_class: macos.m1.medium.gen1

    steps:
      - checkout
      - generate-checksums
      - install-node
      - install-gems
      - run:
          name: Check flags
          command: ./scripts/check-flags/biweekly-flag-check.sh

  build-test-js:
    executor:
      name: node/default
      tag: "20.9.0"
    resource_class: medium
    steps:
      - checkout
      - generate-checksums
      - setup-awscli
      - setup-env-file
      - install-node-modules
      - run-relay-compiler
      - update-echo
      - generate-query-map
      - run:
          name: Check generated folder
          command: |
            if test "$(git diff -- src/__generated__)"
            then
              echo 'You forgot to run `yarn relay` before comitting'
              exit 1
            fi
      - run:
          name: Generate app_build manifest
          command: ./scripts/ci/generate-manifest.js .manifests/app_build '^\./manifests/native_code' '^dist/'
      - store_artifacts:
          path: .manifests
      - persist_to_workspace:
          root: .
          paths:
            - .manifests
            - dist

  build-echo-test-js:
    executor:
      name: node/default
      tag: "20.9.0"
    resource_class: medium
    steps:
      - checkout
      - generate-checksums
      - setup-awscli
      - setup-env-file
      - install-node-modules
      - run-relay-compiler
      # would it be possible to deferenciate this with a flag in order to not duplicate code?
      - update-staging-echo
      - generate-query-map
      - run:
          name: Check generated folder
          command: |
            if test "$(git diff -- src/__generated__)"
            then
              echo 'You forgot to run `yarn relay` before comitting'
              exit 1
            fi
      - run:
          name: Generate app_build manifest
          command: ./scripts/ci/generate-manifest.js .manifests/app_build '^\./manifests/native_code' '^dist/'
      - store_artifacts:
          path: .manifests
      - persist_to_workspace:
          root: .
          paths:
            - .manifests
            - dist

  build-test-app-ios:
    environment:
      BUNDLE_PATH: .vendor # path to install gems and use for caching

    macos:
      xcode: 15.1
      resource_class: macos.m1.medium.gen1

    steps:
      - attach_workspace:
          at: ../workspace
      - restore_cache:
          keys:
            - v13-test-success-{{ checksum "../workspace/.manifests/native_code" }}
      # we can quit the macos build early if there were no native code changes
      # and we're not on the beta branch
      - run:
          name: Quit early if possible
          command: |
            if test $CIRCLE_BRANCH != beta-ios && ls xcode_test_raw.log
            then
              circleci step halt
            fi
      - run:
          name: Quit early if Draft PR
          command: |
            if $(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/artsy/eigen/pulls/${CIRCLE_PULL_REQUEST##*/} | jq ".draft")
            then
              circleci step halt
            fi
      - run:
          name: Clear project dir
          command: |
            rm -rf  /Users/distiller/project/*
      - checkout
      - attach_workspace:
          at: .
      - install-node
      - setup-awscli
      - setup-env-file
      - install-node-modules
      - run-relay-compiler
      - update-echo
      - install-gems
      - install-cocoapods
      - macos/preboot-simulator:
          version: "17.2"
          platform: "iOS"
          device: "iPhone 15 Pro"
      - build-app-ios
      - macos/install-rosetta
      - run:
          name: Run tests if native code has changed
          command: ls xcode_test_raw.log || ./scripts/ci/ci-test-ios
      - save_cache:
          key: v14-test-success-{{ checksum ".manifests/native_code" }}
          paths:
            - xcode_test_raw.log

      - store_artifacts:
          path: xcode_build_raw.log
          prefix: build

      - store_artifacts:
          path: xcode_test_raw.log
          prefix: tests

      - await-previous-builds:
          branch: beta-ios
      - run:
          name: Deploy if beta
          no_output_timeout: 20m
          command: ./scripts/deploys/deploy-if-beta-branch-ios

  build-test-app-android:
    docker:
      - image: cimg/android:2024.01.1-node
    resource_class: large
    steps:
      - prep-android-env
      - await-previous-builds:
          branch: beta-android
      - build-app-android
      - run:
          name: Save success file
          command: echo yes > 'build-success.log'

      - store_artifacts:
          path: android/app/build/reports
          prefix: android-build

      - save_cache:
          key: v12-test-success-{{ checksum "../workspace/.manifests/android_native" }}
          paths:
            - build-success.log
      - run:
          name: Deploy if beta - play store and firebase
          command: ./scripts/deploys/deploy-if-beta-branch-android BOTH

parameters:
  run_workflow_build-run-tests-for-echo:
    type: boolean
    default: false
  run_workflow_test-build-deploy:
    type: boolean
    default: true

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - deploy-nightly-beta
      - run-nightly-tasks

  flag-check:
    triggers:
      - schedule:
          cron: "0 6 * * 4"
          filters:
            branches:
              only:
                - main
    jobs:
      - check-flags

  build-run-tests-for-echo:
    when: << pipeline.parameters.run_workflow_build-run-tests-for-echo >>
    jobs:
      - build-echo-test-js
      - test-js

  test-build-deploy:
    when: << pipeline.parameters.run_workflow_test-build-deploy >>
    jobs:
      - detect-secrets:
          filters:
            branches:
              ignore:
                - main

      - check-code:
          context: danger-github-oss

      - check-and-deploy:
          filters:
            branches:
              only:
                - main

      - test-js

      - build-test-js

      - horizon/block:
          context: horizon
          project_id: 37
          filters:
            branches:
              only:
                - beta-ios
                - beta-android

      - build-test-app-ios:
          filters:
            branches:
              ignore:
                - beta-android
          requires:
            - test-js
            - check-code
            - build-test-js
            - horizon/block

      - build-test-app-android:
          filters:
            branches:
              ignore:
                - beta-ios
          requires:
            - test-js
            - check-code
            - build-test-js
            - horizon/block

      - update-metaphysics:
          filters:
            branches:
              only:
                - beta-ios
                - beta-android
          requires:
            - build-test-app-ios
            - build-test-app-android
