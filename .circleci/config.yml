version: 2.1

defaults: &beta_branches_only
  filters:
    branches:
      only:
        - beta-ios
        - beta-android

defaults_ignore_beta: &ignore_beta_branches
  filters:
    branches:
      ignore:
        - beta-ios
        - beta-android

defaults_main: &main_only
  filters:
    branches:
      only:
        - main

defaults_ignore_main: &ignore_main_branches
  filters:
    branches:
      ignore:
        - main

orbs:
  node: circleci/node@5.3.0
  queue: eddiewebb/queue@3.3.3
  horizon: artsy/release@0.0.1
  macos: circleci/macos@2.5.4
  android: circleci/android@3.1.0

commands:
  install-node:
    steps:
      - node/install:
          install-yarn: true
          node-version: << pipeline.parameters.node_version >>
  generate-checksums:
    steps:
      - run:
          name: "Generate initial checksum manifests"
          command: |
            mkdir .manifests
            scripts/ci/generate-manifest.js .manifests/node_modules '^yarn\.lock$' '^patches/' '^package\.json$'
            scripts/ci/generate-manifest.js .manifests/js_transform '^\.manifests/node_modules' '^babel\.config\.js' '^relay\.config\.js' '^jest\.config\.js'
            scripts/ci/generate-manifest.js .manifests/js_bundle '^\.manifests/js_transform' '^data/' '^index\.ios\.js' '^src/(?!.*(__mocks__|__fixtures__))'
            scripts/ci/generate-manifest.js .manifests/cocoapods '^ios/Podfile' '^Gemfile'
            scripts/ci/generate-manifest.js .manifests/native_code '^\.manifests/node_modules' '^ios/Podfile' '^Gemfile' '^dist/' '^ios/Artsy' '^patches/react-native' '^\.env\.example'
            scripts/ci/generate-manifest.js .manifests/android_native '^\.manifests/node_modules' '^android/' '^patches/react-native' '^\.env\.example'
  setup-env-file:
    steps:
      - run:
          name: "Set up .env file"
          command: touch .env.shared && touch keys.shared.json && scripts/setup/setup-env-for-ci
  setup-awscli:
    steps:
      - run:
          name: "Set up aws cli not installed"
          command: scripts/setup/setup-awscli
  install-node-modules:
    steps:
      - node/install-packages:
          pkg-manager: yarn
          cache-version: << pipeline.parameters.node_modules_cache_key >>
  run-relay-compiler:
    steps:
      - run:
          name: Run Relay compiler
          command: yarn relay
  update-echo:
    steps:
      - run:
          name: Update echo
          command: ./scripts/setup/update-echo
  update-staging-echo:
    steps:
      - run:
          name: Update staging echo
          command: ./scripts/setup/update-staging-echo
  generate-query-map:
    steps:
      - run:
          name: Compile query map
          command: yarn relay
  install-gems:
    steps:
      - restore_cache:
          key: << pipeline.parameters.gems_cache_key >>
      - run:
          name: Bundle install
          command: bundle check || bundle install
          environment:
            BUNDLE_JOBS: 4
            BUNDLE_RETRY: 3
      - save_cache:
          key: << pipeline.parameters.gems_cache_key >>
          paths:
            - .vendor
  install-cocoapods:
    steps:
      - restore_cache:
          key: << pipeline.parameters.cocoapods_cache_key >>
      - run:
          name: Install Pods
          command: cd ios; bundle exec pod check --ignore-dev-pods || bundle exec npx pod-install; cd ..;
      - save_cache:
          key: << pipeline.parameters.cocoapods_cache_key >>
          paths:
            - ios/Pods
            # this changes after pod install because we don't install dev tools on CI
            # so we save it to the cache to avoid comparison errors with Pods/Manifest.lock
            - ios/Podfile.lock
  prep-ios-env:
    steps:
      # we can quit the macos build early if there were no native code changes
      # and we're not on the beta branch.
      - run:
          name: Quit early if possible
          command: |
            if test $CIRCLE_BRANCH != beta-ios && ls xcode_test_raw.log
            then
              circleci step halt
            fi
      - run:
          name: Quit early if Draft PR
          command: |
            if $(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/artsy/eigen/pulls/${CIRCLE_PULL_REQUEST##*/} | jq ".draft")
            then
              circleci step halt
            fi
      - checkout
      - attach_workspace:
          at: .
      - install-node
      - setup-awscli
      - setup-env-file
      - run:
          name: Download fonts from s3
          command: ./scripts/setup/download-fonts
      - run:
          name: Download ios assets
          command: ./scripts/setup/download-assets-ios
      - install-node-modules
      - run-relay-compiler
      - update-echo
      - install-gems
      - install-cocoapods
  install-bin-modules:
    steps:
      - run:
          name: Install bin modules
          command: ./scripts/setup/install-bin
  build-app-ios:
    parameters:
      build_type:
        type: string
        default: "debug"
    steps:
      - restore_cache:
          key: << pipeline.parameters.app_build_ios_cache_key >>
      - run:
          name: Build App
          command: ./scripts/ci/ci-ios << parameters.build_type >>
      - save_cache:
          key: << pipeline.parameters.app_build_ios_cache_key >>
          paths:
            - derived_data
  prep-android-env:
    steps:
      - android/change_java_version:
          java_version: 17
      - run:
          name: Quit early if possible
          command: |
            if test $CIRCLE_BRANCH != beta-android && ls build-success.log
            then
              circleci step halt
            fi
      - run:
          name: Install ninja
          command: sudo apt-get install ninja-build
      - checkout
      - restore_cache:
          key: << pipeline.parameters.app_build_android_cache_key >>
      - install-node
      - setup-awscli
      - setup-env-file
      - install-node-modules
      - run-relay-compiler
      - update-echo
      - install-gems
      - run:
          name: Download fonts from s3
          command: ./scripts/setup/download-fonts
      - run:
          name: Download android assets
          command: ./scripts/setup/download-assets-android
  build-app-android:
    parameters:
      build_type:
        type: string
        default: "release"
    steps:
      - restore_cache:
          key: << pipeline.parameters.app_build_android_cache_key >>
      - generate-query-map
      - run:
          name: Build App
          no_output_timeout: 30m
          command: ./scripts/ci/ci-android << parameters.build_type >>
      - save_cache:
          key: << pipeline.parameters.app_build_android_cache_key >>
          paths:
            - android/build
            - android/app/build
jobs:
  detect-secrets:
    docker:
      - image: artsy/detect-secrets:ci # pragma: allowlist secret
    resource_class: small
    working_directory: /usr/src/app
    steps:
      - checkout
      - run: ./scripts/detect-secrets/secrets-check-all

  run-nightly-tasks:
    environment:
      BUNDLE_PATH: .vendor

    macos:
      xcode: << pipeline.parameters.xcode_version >>
      resource_class: << pipeline.parameters.normal_mac_runner >>

    steps:
      - checkout
      - generate-checksums
      - setup-awscli
      - setup-env-file
      - install-gems
      - run:
          name: Download android assets
          command: ./scripts/setup/download-assets-android
      - run:
          name: Update rollout if needed
          command: ./scripts/deploys/update-android-rollout-if-needed

  run-native-tests-android:
    docker:
      - image: cimg/android:2025.03.1-node
    resource_class: xlarge
    steps:
      - prep-android-env
      - run:
          name: Run Android unit tests
          command: yarn android:test:ci
      - store_test_results:
          path: android/app/build/test-results
      - store_artifacts:
          path: android/app/build/reports/tests

  nightly-create-next-version:
    environment:
      BUNDLE_PATH: .vendor

    macos:
      xcode: << pipeline.parameters.xcode_version >>
      resource_class: << pipeline.parameters.normal_mac_runner >>

    steps:
      - checkout
      - generate-checksums
      - setup-awscli
      - setup-env-file
      - install-gems
      - run:
          name: Create next version if needed
          command: ./scripts/deploys/create-next-version-if-needed

  check-and-deploy:
    environment:
      BUNDLE_PATH: .vendor

    macos:
      xcode: << pipeline.parameters.xcode_version >>
      resource_class: << pipeline.parameters.fast_mac_runner >>

    steps:
      - checkout
      - install-node
      - install-gems
      - setup-awscli
      - install-node-modules
      - run:
          name: Determine Deployment Type
          command: |
            DEPLOYMENT_TYPE=$(./scripts/deploys/expo-updates/determine-deployment-type)
            echo "export DEPLOYMENT_TYPE=$DEPLOYMENT_TYPE" >> $BASH_ENV
      - run:
          name: Handle Deployment for beta
          command: |
            if [ "$DEPLOYMENT_TYPE" == "beta" ]; then
              echo "Native code changed, new beta needed!"
              ./scripts/deploys/expo-updates/maybe-notify-beta-needed
              circleci-agent step halt
            fi
      # - run-relay-compiler
      # - run:
      #     name: Handle Deployment for expo updates
      #     command: |
      #       echo "Triggering Expo updates deployment..."
      #       ./scripts/deploys/expo-updates/deploy-to-expo-updates staging

  test-js:
    parallelism: 16
    executor:
      name: node/default
      tag: << pipeline.parameters.node_version >>
    resource_class: large
    steps:
      - checkout
      - install-node-modules
      - run-relay-compiler
      - run:
          command: yarn jest --ci --forceExit --logHeapUsage --runInBand --reporters=default --reporters=jest-junit --shard=$(expr $CIRCLE_NODE_INDEX + 1)/$CIRCLE_NODE_TOTAL
          name: Run Jest tests
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
            JEST_JUNIT_UNIQUE_OUTPUT_NAME: true
      - store_artifacts:
          path: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/

  update-metaphysics:
    executor:
      name: node/default
      tag: << pipeline.parameters.node_version >>
    resource_class: medium
    steps:
      - checkout
      - generate-checksums
      - install-node-modules
      - run-relay-compiler
      - generate-query-map
      - run:
          name: Update metaphysics
          command: yarn update-metaphysics

  check-code:
    executor:
      name: node/default
      tag: << pipeline.parameters.node_version >>
    resource_class: small
    steps:
      - checkout
      - install-node-modules
      - run-relay-compiler
      - run:
          command: yarn type-check
      - run:
          name: Check Branch and Exit Early if Ignored
          command: |
            if [[ "$CIRCLE_BRANCH" == "main" || "$CIRCLE_BRANCH" == "beta-ios" || "$CIRCLE_BRANCH" == "beta-android" ]]; then
              echo "On ignored branch ($CIRCLE_BRANCH). Exiting early."
              circleci-agent step halt
            fi
      - run:
          name: Danger
          command: yarn danger ci --verbose

  check-flags:
    environment:
      BUNDLE_PATH: .vendor # path to install gems and use for caching

    macos:
      xcode: << pipeline.parameters.xcode_version >>
      resource_class: << pipeline.parameters.normal_mac_runner >>

    steps:
      - checkout
      - generate-checksums
      - install-node
      - install-gems
      - run:
          name: Check flags
          command: ./scripts/check-flags/biweekly-flag-check.sh

  build-test-js:
    executor:
      name: node/default
      tag: << pipeline.parameters.node_version >>
    resource_class: medium
    steps:
      - checkout
      - generate-checksums
      - setup-awscli
      - setup-env-file
      - install-node-modules
      - run-relay-compiler
      - update-echo
      - generate-query-map
      - run:
          name: Check generated folder
          command: |
            if test "$(git diff -- src/__generated__)"
            then
              echo 'You forgot to run `yarn relay` before comitting'
              exit 1
            fi
      - run:
          name: Generate app_build manifest
          command: ./scripts/ci/generate-manifest.js .manifests/app_build '^\./manifests/native_code' '^dist/'
      - store_artifacts:
          path: .manifests
      - persist_to_workspace:
          root: .
          paths:
            - .manifests
            - dist

  build-echo-test-js:
    executor:
      name: node/default
      tag: << pipeline.parameters.node_version >>
    resource_class: medium
    steps:
      - checkout
      - generate-checksums
      - setup-awscli
      - setup-env-file
      - install-node-modules
      - run-relay-compiler
      # would it be possible to differentiate this with a flag in order to not duplicate code?
      - update-staging-echo
      - generate-query-map
      - run:
          name: Check generated folder
          command: |
            if test "$(git diff -- src/__generated__)"
            then
              echo 'You forgot to run `yarn relay` before comitting'
              exit 1
            fi

  build-test-app-ios:
    environment:
      BUNDLE_PATH: .vendor # path to install gems and use for caching

    macos:
      xcode: << pipeline.parameters.xcode_version >>
      resource_class: << pipeline.parameters.fast_mac_runner >>

    steps:
      - attach_workspace:
          at: ../workspace
      - restore_cache:
          key: << pipeline.parameters.ios_native_code_cache_prefix >>-{{ checksum "../workspace/.manifests/native_code" }}
      - prep-ios-env
      - macos/preboot-simulator:
          version: "18.2"
          platform: "iOS"
          device: "iPhone 16 Pro"
      - build-app-ios
      - run:
          name: Run tests if native code has changed
          command: ls xcode_test_raw.log || ./scripts/ci/ci-test-ios
      - save_cache:
          key: << pipeline.parameters.ios_native_code_cache_prefix >>-{{ checksum ".manifests/native_code" }}
          paths:
            - xcode_test_raw.log

      - store_artifacts:
          path: xcode_build_raw.log
          prefix: build

      - store_artifacts:
          path: xcode_test_raw.log
          prefix: tests

  build-test-app-android:
    docker:
      - image: cimg/android:2025.03.1-node
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: ../workspace
      - restore_cache:
          key: << pipeline.parameters.android_native_cache_key >>
      - prep-android-env
      - build-app-android
      - run:
          name: Save success file
          command: echo yes > 'build-success.log'

      - store_artifacts:
          path: android/app/build/reports
          prefix: android-build

      - save_cache:
          key: << pipeline.parameters.android_native_cache_key >>
          paths:
            - build-success.log

parameters:
  xcode_version:
    type: string
    default: "16.2"
  node_version:
    type: string
    default: "22.0.0"
  fast_mac_runner:
    type: string
    default: "m4pro.medium"
  normal_mac_runner:
    type: string
    default: "m2pro.medium"
  run_workflow_build-run-tests-for-echo:
    type: boolean
    default: false
  run_workflow_test-build-deploy:
    type: boolean
    default: true
  # Update Manually these versions below in order to hard overwrite the caches
  node_modules_cache_key:
    type: string
    default: v24-node_modules-{{ checksum ".manifests/node_modules" }}
  gems_cache_key:
    type: string
    default: v13-gems-{{ checksum "Gemfile.lock" }}-{{ arch }}
  cocoapods_cache_key:
    type: string
    default: v34-pods-{{ checksum ".manifests/cocoapods" }}
  app_build_ios_cache_key:
    type: string
    default: v29-app_build_ios-{{ checksum ".manifests/app_build" }}
  app_build_android_cache_key:
    type: string
    default: v12-app_build_android-{{ checksum "../workspace/.manifests/app_build" }}
  ios_native_code_cache_prefix:
    type: string
    # this one is not including the checksum due to path differences in the checksum
    default: v19-test-success
  android_native_cache_key:
    type: string
    default: v16-test-success-{{ checksum "../workspace/.manifests/android_native" }}

workflows:
  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - nightly-create-next-version
      - run-nightly-tasks
      - run-native-tests-android

  flag-check:
    triggers:
      - schedule:
          cron: "0 6 * * 4"
          filters:
            branches:
              only:
                - main
    jobs:
      - check-flags

  build-run-tests-for-echo:
    when: << pipeline.parameters.run_workflow_build-run-tests-for-echo >>
    jobs:
      - build-echo-test-js
      - test-js

  test-build-deploy:
    when: << pipeline.parameters.run_workflow_test-build-deploy >>
    jobs:
      - detect-secrets:
          <<: *ignore_main_branches

      - check-code:
          context: danger-github-oss

      - horizon/block:
          <<: *beta_branches_only
          context: horizon
          project_id: 37

      - check-and-deploy:
          <<: *main_only

      - test-js:
          <<: *ignore_beta_branches

      - build-test-js:
          <<: *ignore_beta_branches

      - build-test-app-ios:
          <<: *ignore_beta_branches
          requires:
            - test-js
            - check-code
            - build-test-js

      - build-test-app-android:
          <<: *ignore_beta_branches
          requires:
            - test-js
            - check-code
            - build-test-js

      - update-metaphysics:
          <<: *beta_branches_only
