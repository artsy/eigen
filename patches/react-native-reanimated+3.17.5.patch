diff --git a/node_modules/react-native-reanimated/lib/typescript/component/FlatList.d.ts b/node_modules/react-native-reanimated/lib/typescript/component/FlatList.d.ts
index adcfb6e..9244d1b 100644
--- a/node_modules/react-native-reanimated/lib/typescript/component/FlatList.d.ts
+++ b/node_modules/react-native-reanimated/lib/typescript/component/FlatList.d.ts
@@ -1,7 +1,7 @@
 import React from 'react';
-import type { FlatListProps } from 'react-native';
+import type { FlatListProps, StyleProp, ViewStyle } from 'react-native';
 import { FlatList } from 'react-native';
-import type { ILayoutAnimationBuilder } from '../commonTypes';
+import type { AnimatedStyle, ILayoutAnimationBuilder } from '../commonTypes';
 import type { AnimatedProps } from '../helperTypes';
 declare const AnimatedFlatList: React.ComponentClass<import("../helperTypes").AnimateProps<FlatListProps<unknown>>, any>;
 interface ReanimatedFlatListPropsWithLayout<T> extends AnimatedProps<FlatListProps<T>> {
@@ -18,6 +18,14 @@ interface ReanimatedFlatListPropsWithLayout<T> extends AnimatedProps<FlatListPro
     skipEnteringExitingAnimations?: boolean;
     /** Property `CellRendererComponent` is not supported in `Animated.FlatList`. */
     CellRendererComponent?: never;
+    /**
+     * Either animated view styles or a function that receives the item to be
+     * rendered and its index and returns animated view styles.
+     */
+    CellRendererComponentStyle?: StyleProp<AnimatedStyle<StyleProp<ViewStyle>>> | (({ item, index, }: {
+        item: T;
+        index: number;
+    }) => StyleProp<AnimatedStyle<StyleProp<ViewStyle>>>) | undefined;
 }
 export type FlatListPropsWithLayout<T> = ReanimatedFlatListPropsWithLayout<T>;
 interface AnimatedFlatListComplement<T> extends FlatList<T> {
diff --git a/node_modules/react-native-reanimated/src/component/FlatList.tsx b/node_modules/react-native-reanimated/src/component/FlatList.tsx
index 8353d53..2136d4f 100644
--- a/node_modules/react-native-reanimated/src/component/FlatList.tsx
+++ b/node_modules/react-native-reanimated/src/component/FlatList.tsx
@@ -17,15 +17,20 @@ import { AnimatedView } from './View';

 const AnimatedFlatList = createAnimatedComponent(FlatList);

-interface CellRendererComponentProps {
-  onLayout?: ((event: LayoutChangeEvent) => void) | undefined;
-  children: React.ReactNode;
-  style?: StyleProp<AnimatedStyle<ViewStyle>>;
+interface CellRendererComponentProps<ItemT = any> {
+   index: number;
+   item: ItemT;
+   onLayout?: ((event: LayoutChangeEvent) => void) | undefined;
+   children: React.ReactNode;
+   style?: StyleProp<AnimatedStyle<ViewStyle>>;
 }

 const createCellRendererComponent = (
   itemLayoutAnimationRef?: React.MutableRefObject<
     ILayoutAnimationBuilder | undefined
+  >,
+  cellRendererComponentStyleRef?: React.MutableRefObject<
+    ReanimatedFlatListPropsWithLayout<any>['CellRendererComponentStyle']
   >
 ) => {
   const CellRendererComponent = (props: CellRendererComponentProps) => {
@@ -34,7 +39,15 @@ const createCellRendererComponent = (
         // TODO TYPESCRIPT This is temporary cast is to get rid of .d.ts file.
         layout={itemLayoutAnimationRef?.current as any}
         onLayout={props.onLayout}
-        style={props.style}>
+         style={[
+          props.style,
+          typeof cellRendererComponentStyleRef?.current === 'function'
+            ? cellRendererComponentStyleRef?.current({
+                index: props.index,
+                item: props.item,
+              })
+            : cellRendererComponentStyleRef?.current,
+          ]}>
         {props.children}
       </AnimatedView>
     );
@@ -58,6 +71,20 @@ interface ReanimatedFlatListPropsWithLayout<T>
   skipEnteringExitingAnimations?: boolean;
   /** Property `CellRendererComponent` is not supported in `Animated.FlatList`. */
   CellRendererComponent?: never;
+  /**
+   * Either animated view styles or a function that receives the item to be
+   * rendered and its index and returns animated view styles.
+   */
+  CellRendererComponentStyle:
+    | StyleProp<AnimatedStyle<StyleProp<ViewStyle>>>
+    | (({
+        item,
+        index,
+      }: {
+        item: T;
+        index: number;
+      }) => StyleProp<AnimatedStyle<StyleProp<ViewStyle>>>)
+    | undefined;
 }

 export type FlatListPropsWithLayout<T> = ReanimatedFlatListPropsWithLayout<T>;
@@ -74,8 +101,12 @@ const FlatListForwardRefRender = function <Item = any>(
   props: ReanimatedFlatListPropsWithLayout<Item>,
   ref: React.ForwardedRef<FlatList>
 ) {
-  const { itemLayoutAnimation, skipEnteringExitingAnimations, ...restProps } =
-    props;
+  const {
+    itemLayoutAnimation,
+    skipEnteringExitingAnimations,
+    CellRendererComponentStyle,
+    ...restProps
+  } = props;

   // Set default scrollEventThrottle, because user expects
   // to have continuous scroll events and
@@ -89,9 +120,16 @@ const FlatListForwardRefRender = function <Item = any>(
   const itemLayoutAnimationRef = useRef(itemLayoutAnimation);
   itemLayoutAnimationRef.current = itemLayoutAnimation;

+  const cellRendererComponentStyleRef = useRef(CellRendererComponentStyle);
+  cellRendererComponentStyleRef.current = CellRendererComponentStyle;
+
   const CellRendererComponent = React.useMemo(
-    () => createCellRendererComponent(itemLayoutAnimationRef),
-    [itemLayoutAnimationRef]
+    () =>
+      createCellRendererComponent(
+        itemLayoutAnimationRef,
+        cellRendererComponentStyleRef
+      ),
+    [itemLayoutAnimationRef, cellRendererComponentStyleRef]
   );

   const animatedFlatList = (